// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode = "prisma"
  
}
enum Gender {
  MALE
  FEMALE
  NON_BINARY
  OTHER
  NULL
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  institutionalEmail String? @unique @default("")
  IEVerified    Boolean?  @default(false)
  hashedId     String?   @default("")
  image        String?
  accounts      Account[]
  sessions      Session[]
  password    String?
  role        Role?         @default(USER)
  isGraduated Boolean?      @default(false)
  birthdate   Int?
  gender      Gender?      @default(NULL)
  degreeWorks DegreeWorks[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum DegreeWorkType {
  THESIS
  ARTICLE
}
model Tag {
  id    String @id @default(uuid()) 
  name  String
  degreeWorks DegreeWorks[]
}

model DegreeWorks {
  id          String         @id @default(uuid()) 
  title       String
  description String
  file        String?
  authors     String
  advisors     String
  publisher      User?           @relation(fields: [publisherId], references: [id]) 
  publisherId    String?
  type        DegreeWorkType
  admisionDate   DateTime?
  year        Int
  CreatedAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?
  tags       Tag[]

  @@index([publisherId])
}